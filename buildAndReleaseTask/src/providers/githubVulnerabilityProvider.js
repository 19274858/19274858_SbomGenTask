"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPackageInfo = void 0;
const tl = require("azure-pipelines-task-lib/task");
const child_process_1 = require("child_process");
function getPackageInfo() {
    return __awaiter(this, void 0, void 0, function* () {
        console.log('Installing CycloneDX tool...');
        return new Promise((resolve, reject) => {
            (0, child_process_1.exec)('dotnet tool install --global CycloneDX', (err, stdout, stderr) => {
                if (err) {
                    tl.setResult(tl.TaskResult.Failed, `Failed to install CycloneDX tool: ${stderr}`);
                    return reject(err);
                }
                console.log(stdout);
                resolve();
            });
        });
    });
}
exports.getPackageInfo = getPackageInfo;
