"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getVulnerabilityInfo = void 0;
const tl = require("azure-pipelines-task-lib/task");
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const axios_1 = __importDefault(require("axios"));
class SBom {
}
class License {
}
class SbomJsonReader {
    readSbomJson(sbomJsonString, nuGetUrl) {
        return __awaiter(this, void 0, void 0, function* () {
            const sbomObj = JSON.parse(sbomJsonString);
            const sBomComponents = sbomObj['components'];
            const sboms = [];
            for (let i = 0; i < sBomComponents.length; i++) {
                console.log(i);
                const sBomComponent = sBomComponents[i];
                const packageName = sBomComponent['name'];
                const usedVersion = sBomComponent['version'];
                const usedVersionVulnerabilityInfo = yield this.getPackageVulnerabilityInfo(packageName, usedVersion, nuGetUrl);
                const lastVersion = yield this.getLastStableVersion(packageName, nuGetUrl);
                const lastStableVersionVulnerabilityInfo = yield this.getPackageVulnerabilityInfo(packageName, lastVersion, nuGetUrl);
                const licenseType = this.getLicenseInfo(packageName, sBomComponent);
                const description = sBomComponent['description'];
                const externalReferences = this.getExternalReferences(sBomComponent['externalReferences']);
                sboms.push({
                    packageName,
                    author: '',
                    licenseType,
                    usedVersion,
                    usedVersionVulnerabilityInfo,
                    lastStableVersion: lastVersion,
                    lastStableVersionVulnerabilityInfo,
                    description,
                    externalReferences,
                });
            }
            return sboms;
        });
    }
    getPackageVulnerabilityInfo(packageName, packageVersion, nuGetUrl) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                if (!packageVersion) {
                    return [];
                }
                // Get the registration base URL for the package metadata
                const indexResponse = yield axios_1.default.get(`${nuGetUrl}`);
                const registrationBaseUrl = indexResponse.data.resources.find((resource) => resource['@type'] === 'RegistrationsBaseUrl/3.6.0')['@id'];
                // Fetch the package metadata
                const packageMetadataUrl = `${registrationBaseUrl}${packageName.toLowerCase()}/index.json`;
                const packageMetadataResponse = yield axios_1.default.get(packageMetadataUrl);
                // Find the version metadata
                const versionMetadata = packageMetadataResponse.data.items[0].items.find((item) => item.catalogEntry.version === packageVersion);
                if (!versionMetadata) {
                    return [];
                }
                const packageData = versionMetadata.catalogEntry;
                // Extract and return the vulnerability information
                const vulnerabilities = packageData.vulnerabilities.map(v => v.advisoryUrl);
                return vulnerabilities;
            }
            catch (error) {
                console.error('Error fetching package vulnerability info:', error);
                return [];
            }
        });
    }
    /// <summary>
    /// Connecting to NuGet to extract last available package version
    /// </summary>
    /// <param name="packageName"></param>
    /// <param name="nuGetUrl"></param>
    /// <returns></returns>
    getLastStableVersion(packageName, nuGetUrl) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                // Get the registration base URL for the package metadata
                const indexResponse = yield axios_1.default.get(`${nuGetUrl}`);
                const registrationBaseUrl = indexResponse.data.resources.find((resource) => resource['@type'] === 'RegistrationsBaseUrl/3.6.0')['@id'];
                // Fetch the package metadata
                const packageMetadataUrl = `${registrationBaseUrl}${packageName.toLowerCase()}/index.json`;
                const packageMetadataResponse = yield axios_1.default.get(packageMetadataUrl);
                // Extract versions
                const versions = packageMetadataResponse.data.items[0].items.map((item) => ({
                    version: item.catalogEntry.version
                }));
                // Filter stable versions and find the latest
                const stableVersions = versions
                    .filter(v => !v.version.includes('-'))
                    .map(v => v.version)
                    .sort((a, b) => a.localeCompare(b, undefined, { numeric: true, sensitivity: 'base' }));
                const stableVersion = stableVersions.length > 0 ? stableVersions[stableVersions.length - 1] : null;
                return stableVersion;
            }
            catch (error) {
                console.error('Error fetching the latest stable version:', error);
                return null;
            }
        });
    }
    getExternalReferences(externalReferences) {
        if (!externalReferences || externalReferences.length !== 1) {
            throw new Error('Unable to parse ExternalReferences');
        }
        const urls = externalReferences.map(x => x['url']);
        return urls.join(', ');
    }
    getLicenseInfo(name, sBomComponent) {
        const licenses = sBomComponent['licenses'];
        if (!licenses || licenses.length !== 1) {
            throw new Error(`Unable to parse a license for ${name} component`);
        }
        const license = licenses[0]['license'];
        if (!license) {
            return 'No license information found';
        }
        else if (license['id']) {
            return license['id'];
        }
        else {
            const licenseObj = {
                name: license['name'],
                url: license['url']
            };
            return `${licenseObj.name}, ${licenseObj.url}`;
        }
    }
}
function getVulnerabilityInfo(jsonInputPath, sbomOutputDirectory, sbomOutputName) {
    return __awaiter(this, void 0, void 0, function* () {
        const nuGetUrl = 'https://api.nuget.org/v3/index.json';
        fs.readFile(jsonInputPath, 'utf8', (err, data) => {
            if (err) {
                tl.setResult(tl.TaskResult.Failed, `Unable to read JSON output: ${err.message}`);
                return;
            }
            const sbomJsonString = JSON.parse(data);
            const currentLocation = __dirname;
            const currentFolder = path.dirname(currentLocation);
            if (!currentFolder) {
                throw new Error('Unable to get current directory');
            }
            const reader = new SbomJsonReader();
            const sboms = reader.readSbomJson(sbomJsonString, nuGetUrl);
            const sbom = JSON.stringify(sboms);
            const sbomOutputPath = path.join(sbomOutputDirectory, sbomOutputName);
            fs.writeFile(sbomOutputPath, sbom, 'utf8', (err) => {
                if (err) {
                    tl.setResult(tl.TaskResult.Failed, `Unable to write HTML output: ${err.message}`);
                }
                console.log(`HTML report generated at: ${sbomOutputPath}`);
            });
            return sbomOutputPath;
        });
        return null;
    });
}
exports.getVulnerabilityInfo = getVulnerabilityInfo;
